---
import Layout from '../../layouts/ProjectPage.astro'
import Blox from '../../components/Blox.svelte'
import { getCollection } from 'astro:content'
import shuffle from '../../helpers/shuffle'
import { Octokit } from '@octokit/core'

// this is for removing the global 
// header and footer if the page is
// accessed by client side nav
// if this is not present, that means
// the page was accessed by the url
// directly so it should show header/footer
const { inline } = Astro.props

const octokit = new Octokit({ auth: import.meta.env.GH_TOKEN });

const response = await octokit.request('GET /users/{username}/repos', {
  username: 'samifouad',
  headers: {
    'X-GitHub-Api-Version': '2022-11-28'
  }
})

const project_list = response.data
    							.filter(repo => !repo.private)
								.map(repo => repo.full_name)

//console.log(project_list)

async function getFileContent(owner: string, repo: string, path: string) {
  try {
    const response = await octokit.request('GET /repos/{owner}/{repo}/contents/{path}', {
      owner: owner,
      repo: repo,
      path: path,
      headers: {
        'X-GitHub-Api-Version': '2022-11-28',
      },
    });

    // Decode content if it's base64 encoded
    const content = Buffer.from(response.data.content, 'base64').toString('utf-8');
	// Parse the JSON string into an object
    const parsedContent = JSON.parse(content);
    
    return parsedContent;
    
  } catch (error) {
    if (error.status === 404) {
      console.log(`File ${path} does not exist in the repository ${repo}.`);
      return null;
    } else {
      console.error("An error occurred:", error);
      throw error;  // Rethrow the error for network or other issues
    }
  }
}

const website_projects = await project_list.map(async (item) => {
	const [owner, repo] = item.split('/');
	const content = await getFileContent(owner, repo, 'sf.json');
	if (content !== null) {
		console.log('found for: '+ item)
		return content;
	}
})

const results = await Promise.all(website_projects);
const filteredResults = results.filter(content => content !== undefined)
console.log('New Results:', filteredResults);

// const posts = await getCollection('projects')
// let projects = posts.map(post => post.data)

// console.log('Old Results:', filteredResults);

let projects = filteredResults
shuffle(projects)
---

<style>

@media only screen and (max-width: 480px) {
    .wrapper {
      width: 98%;
      margin: 0 auto;
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      grid-auto-rows: 75px;
      grid-gap: 8px;
      grid-auto-flow: dense;
    }
  }

  @media only screen and (min-width: 481px) {
    .wrapper {
      width: 98%;
      margin: 0 auto;
      display: grid;
      grid-template-columns: repeat( auto-fit, minmax(200px, 3fr) );
      grid-auto-rows: 75px;
      grid-gap: 8px;
      grid-auto-flow: dense;
    }
  }

  @media only screen and (min-width: 630px) {
    .wrapper {
      width: 98%;
      margin: 0 auto;
      display: grid;
      grid-template-columns: repeat( auto-fit, minmax(200px, 3fr) );
      grid-auto-rows: 75px;
      grid-gap: 8px;
      grid-auto-flow: dense;
    }
  }
@media only screen and (max-width: 480px) {
	.item {
		position: relative;
		color: white;
		background: #f9f9f9;
		padding: 0px;
		grid-column: span 1;
		grid-row: span 2;
	}
	.item:nth-child(even) {
		background: #ececec;
	}
	.item:hover {
		cursor: pointer;
	}
	.hero {
		grid-column: span 2;
		grid-row: span 4;
	}
	.vert {
		grid-column: span 1;
		grid-row: span 3;
	}
	.micro {
		grid-column: span 1;
		grid-row: span 1;
	}
}
@media only screen and (min-width: 481px) {
	.item {
		position: relative;
		color: white;
		background: #f9f9f9;
		padding: 0px;
		grid-column: span 1;
		grid-row: span 2;
	}
	.item:nth-child(even) {
		background: #ececec;
	}
	.item:hover {
		cursor: pointer;
	}
	.hero {
		grid-column: span 2;
		grid-row: span 4;
	}
	.vert {
		grid-column: span 1;
		grid-row: span 3;
	}

	.micro {
		grid-column: span 1;
		grid-row: span 1;
	}
}
@media only screen and (min-width: 630px) {
	.item {
		position: relative;
		color: white;
		padding: 0px;
		scale: 1.0;
		text-align: center;
		transition-duration: 0.2s;
		grid-column: span 1;
		grid-row: span 2;
	}
	.item .bname {
		text-shadow: 1px 1px 0px rgba(0,0,0,0.5);
	}
	.item:hover {
		cursor: pointer;
	}
	.hero {
		grid-column: span 2;
		grid-row: span 4;
	}
	.vert {
		grid-column: span 1;
		grid-row: span 5;
	}
	.micro {
		grid-column: span 1;
		grid-row: span 1;
	}
}
</style>

{inline ? 
    <div class="wrapper">
        {projects.map(project => (
            <div class:list={["item rounded-[18px]", project.size]} style={{ 'background': project.colour }} transition:name={project.url}><Blox type={project.size} tag={project.code ? project.code : ''} name={project.tag ? project.tag : ''} footer={project.title} url={project.url} colour={project.colour} transition:name={project.url} /></div>
        ))}
    </div>
    :
    <Layout>
        <div class="wrapper">
            {projects.map(project => (
                <div class:list={["item rounded-[18px]", project.size]} style={{ 'background': project.colour }}  transition:name={project.url}><Blox type={project.size} tag={project.code ? project.code : ''} name={project.tag ? project.tag : ''} footer={project.title} url={project.url} colour={project.colour} /></div>
            ))}
        </div>
    </Layout>
}